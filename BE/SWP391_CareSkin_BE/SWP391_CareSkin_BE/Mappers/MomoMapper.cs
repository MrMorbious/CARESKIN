using AutoMapper;
using SWP391_CareSkin_BE.DTOS.Requests.Momo;
using SWP391_CareSkin_BE.DTOS.Responses.Momo;
using SWP391_CareSkin_BE.Models;

namespace SWP391_CareSkin_BE.Mappers
{
    public class MomoMapper : Profile
    {
        public MomoMapper()
        {
            // Mapping from DTO -> Model
            CreateMap<MomoPaymentRequestDto, MomoPayment>()
                .ForMember(dest => dest.MomoPaymentId, opt => opt.Ignore())
                .ForMember(dest => dest.Amount, opt => opt.MapFrom(src => src.Amount))
                .ForMember(dest => dest.IsPaid, opt => opt.MapFrom(src => false))
                .ForMember(dest => dest.CreatedDate, opt => opt.MapFrom(src => DateTime.UtcNow))
                .ForMember(dest => dest.PaymentTime, opt => opt.Ignore())
                .ForMember(dest => dest.Order, opt => opt.Ignore());

            // Mapping from Callback DTO -> Model
            CreateMap<MomoCallbackDto, MomoCallback>()
                .ForMember(dest => dest.MomoCallbackId, opt => opt.Ignore()) // Ignoring MomoCallbackId, will be auto-generated by the database
                .ForMember(dest => dest.PartnerCode, opt => opt.MapFrom(src => src.PartnerCode))
                .ForMember(dest => dest.OrderId, opt => opt.MapFrom(src => src.OrderId))
                .ForMember(dest => dest.RequestId, opt => opt.MapFrom(src => src.RequestId))
                .ForMember(dest => dest.Amount, opt => opt.MapFrom(src => src.Amount))
                .ForMember(dest => dest.OrderInfo, opt => opt.MapFrom(src => src.OrderInfo))
                .ForMember(dest => dest.OrderType, opt => opt.MapFrom(src => src.OrderType))
                .ForMember(dest => dest.TransId, opt => opt.MapFrom(src => ParseTransId(src.TransId))) // Parsing TransId if possible
                .ForMember(dest => dest.ResultCode, opt => opt.MapFrom(src => src.ResultCode))
                .ForMember(dest => dest.Message, opt => opt.MapFrom(src => src.Message))
                .ForMember(dest => dest.PayType, opt => opt.MapFrom(src => src.PayType))
                .ForMember(dest => dest.ResponseTime, opt => opt.MapFrom(src => src.ResponseTime))
                .ForMember(dest => dest.ExtraData, opt => opt.MapFrom(src => src.ExtraData))
                .ForMember(dest => dest.Signature, opt => opt.MapFrom(src => src.Signature))
                .ForMember(dest => dest.ReceivedDate, opt => opt.MapFrom(src => DateTime.UtcNow)); // Setting the current UTC time for ReceivedDate


            // Mapping from Model -> Status DTO
            CreateMap<MomoPayment, MomoPaymentStatusDto>()
                .ForMember(dest => dest.OrderId, opt => opt.MapFrom(src => src.OrderId))
                .ForMember(dest => dest.Amount, opt => opt.MapFrom(src => src.Amount))
                .ForMember(dest => dest.IsPaid, opt => opt.MapFrom(src => src.IsPaid))
                .ForMember(dest => dest.PaymentTime, opt => opt.MapFrom(src => src.PaymentTime));
        }

        private static long ParseTransId(string transId)
        {
            return long.TryParse(transId, out var result) ? result : 0;
        }
    }
}
