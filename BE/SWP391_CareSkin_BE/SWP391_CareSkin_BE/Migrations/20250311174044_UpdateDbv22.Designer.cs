// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SWP391_CareSkin_BE.Data;

#nullable disable

namespace SWP391_CareSkin_BE.Migrations
{
    [DbContext(typeof(MyDbContext))]
    [Migration("20250311174044_UpdateDbv22")]
    partial class UpdateDbv22
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SWP391_CareSkin_BE.Models.Admin", b =>
                {
                    b.Property<int>("AdminId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AdminId"));

                    b.Property<DateOnly?>("DoB")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PictureUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AdminId");

                    b.ToTable("Admin");
                });

            modelBuilder.Entity("SWP391_CareSkin_BE.Models.Answer", b =>
                {
                    b.Property<int>("AnswerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AnswerId"));

                    b.Property<string>("AnswersText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.HasKey("AnswerId");

                    b.HasIndex("QuestionId");

                    b.ToTable("Answer");
                });

            modelBuilder.Entity("SWP391_CareSkin_BE.Models.BlogNews", b =>
                {
                    b.Property<int>("BlogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BlogId"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("PictureUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BlogId");

                    b.HasIndex("CustomerId");

                    b.ToTable("BlogNews");
                });

            modelBuilder.Entity("SWP391_CareSkin_BE.Models.Brand", b =>
                {
                    b.Property<int>("BrandId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BrandId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PictureUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BrandId");

                    b.ToTable("Brand");
                });

            modelBuilder.Entity("SWP391_CareSkin_BE.Models.Cart", b =>
                {
                    b.Property<int>("CartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CartId"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("ProductVariationId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("CartId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProductVariationId");

                    b.ToTable("Cart");
                });

            modelBuilder.Entity("SWP391_CareSkin_BE.Models.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerId"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly?>("Dob")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PictureUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("CustomerId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("SWP391_CareSkin_BE.Models.FAQ", b =>
                {
                    b.Property<int>("FAQId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FAQId"));

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FAQId");

                    b.ToTable("FAQ");
                });

            modelBuilder.Entity("SWP391_CareSkin_BE.Models.History", b =>
                {
                    b.Property<int>("HistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HistoryId"));

                    b.Property<int>("AnswerId")
                        .HasColumnType("int");

                    b.Property<int>("AttemmptId")
                        .HasColumnType("int");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.HasKey("HistoryId");

                    b.HasIndex("AnswerId");

                    b.HasIndex("AttemmptId");

                    b.HasIndex("QuestionId");

                    b.ToTable("History");
                });

            modelBuilder.Entity("SWP391_CareSkin_BE.Models.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("OrderDate")
                        .HasColumnType("date");

                    b.Property<int>("OrderStatusId")
                        .HasColumnType("int");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PromotionId")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("OrderId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("OrderStatusId");

                    b.HasIndex("PromotionId");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("SWP391_CareSkin_BE.Models.OrderProduct", b =>
                {
                    b.Property<int>("OrderProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderProductId"));

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("ProductVariationId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("SalePrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("OrderProductId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProductVariationId");

                    b.ToTable("OrderProduct");
                });

            modelBuilder.Entity("SWP391_CareSkin_BE.Models.OrderStatus", b =>
                {
                    b.Property<int>("OrderStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderStatusId"));

                    b.Property<string>("OrderStatusName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OrderStatusId");

                    b.ToTable("OrderStatus");
                });

            modelBuilder.Entity("SWP391_CareSkin_BE.Models.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"));

                    b.Property<double>("AverageRating")
                        .HasColumnType("float");

                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PictureUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductId");

                    b.HasIndex("BrandId");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("SWP391_CareSkin_BE.Models.ProductDetailIngredient", b =>
                {
                    b.Property<int>("ProductDetailIngredientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductDetailIngredientId"));

                    b.Property<string>("IngredientName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("ProductDetailIngredientId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductDetailIngredient");
                });

            modelBuilder.Entity("SWP391_CareSkin_BE.Models.ProductForSkinType", b =>
                {
                    b.Property<int>("ProductForSkinTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductForSkinTypeId"));

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("SkinTypeId")
                        .HasColumnType("int");

                    b.HasKey("ProductForSkinTypeId");

                    b.HasIndex("ProductId");

                    b.HasIndex("SkinTypeId");

                    b.ToTable("ProductForSkinType");
                });

            modelBuilder.Entity("SWP391_CareSkin_BE.Models.ProductMainIngredient", b =>
                {
                    b.Property<int>("ProductMainIngredientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductMainIngredientId"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IngredientName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("ProductMainIngredientId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductMainIngredient");
                });

            modelBuilder.Entity("SWP391_CareSkin_BE.Models.ProductPicture", b =>
                {
                    b.Property<int>("ProductPictureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductPictureId"));

                    b.Property<string>("PictureUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("ProductPictureId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductPicture");
                });

            modelBuilder.Entity("SWP391_CareSkin_BE.Models.ProductUsage", b =>
                {
                    b.Property<int>("ProductUsageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductUsageId"));

                    b.Property<string>("Instruction")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Step")
                        .HasColumnType("int");

                    b.HasKey("ProductUsageId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductUsage");
                });

            modelBuilder.Entity("SWP391_CareSkin_BE.Models.ProductVariation", b =>
                {
                    b.Property<int>("ProductVariationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductVariationId"));

                    b.Property<int>("Ml")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<decimal>("SalePrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ProductVariationId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductVariation");
                });

            modelBuilder.Entity("SWP391_CareSkin_BE.Models.Promotion", b =>
                {
                    b.Property<int>("PromotionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PromotionId"));

                    b.Property<decimal>("DiscountPercent")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateOnly>("End_Date")
                        .HasColumnType("date");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("PromotionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PromotionType")
                        .HasColumnType("int");

                    b.Property<DateOnly>("Start_Date")
                        .HasColumnType("date");

                    b.HasKey("PromotionId");

                    b.ToTable("Promotion");
                });

            modelBuilder.Entity("SWP391_CareSkin_BE.Models.PromotionCustomer", b =>
                {
                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("PromotionId")
                        .HasColumnType("int");

                    b.HasKey("CustomerId", "PromotionId");

                    b.HasIndex("PromotionId");

                    b.ToTable("PromotionCustomer");
                });

            modelBuilder.Entity("SWP391_CareSkin_BE.Models.PromotionProduct", b =>
                {
                    b.Property<int>("PromotionProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PromotionProductId"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("PromotionId")
                        .HasColumnType("int");

                    b.HasKey("PromotionProductId");

                    b.HasIndex("ProductId");

                    b.HasIndex("PromotionId");

                    b.ToTable("PromotionProduct");
                });

            modelBuilder.Entity("SWP391_CareSkin_BE.Models.Question", b =>
                {
                    b.Property<int>("QuestionsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QuestionsId"));

                    b.Property<string>("QuestionText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("QuizId")
                        .HasColumnType("int");

                    b.HasKey("QuestionsId");

                    b.HasIndex("QuizId");

                    b.ToTable("Question");
                });

            modelBuilder.Entity("SWP391_CareSkin_BE.Models.Quiz", b =>
                {
                    b.Property<int>("QuizId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QuizId"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("QuizId");

                    b.ToTable("Quiz");
                });

            modelBuilder.Entity("SWP391_CareSkin_BE.Models.RatingFeedback", b =>
                {
                    b.Property<int>("RatingFeedbackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RatingFeedbackId"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("FeedBack")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsVisible")
                        .HasColumnType("bit");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("RatingFeedbackId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ProductId");

                    b.ToTable("RatingFeedback");
                });

            modelBuilder.Entity("SWP391_CareSkin_BE.Models.RatingFeedbackImage", b =>
                {
                    b.Property<int>("RatingFeedbackImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RatingFeedbackImageId"));

                    b.Property<string>("FeedbackImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RatingFeedbackId")
                        .HasColumnType("int");

                    b.HasKey("RatingFeedbackImageId");

                    b.HasIndex("RatingFeedbackId");

                    b.ToTable("RatingFeedbackImage");
                });

            modelBuilder.Entity("SWP391_CareSkin_BE.Models.Result", b =>
                {
                    b.Property<int>("ResultId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ResultId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastQuizTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("SkinTypeId")
                        .HasColumnType("int");

                    b.Property<int>("TotalQuestions")
                        .HasColumnType("int");

                    b.Property<int>("TotalScore")
                        .HasColumnType("int");

                    b.Property<int>("UserQuizAttemptId")
                        .HasColumnType("int");

                    b.HasKey("ResultId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("SkinTypeId");

                    b.HasIndex("UserQuizAttemptId")
                        .IsUnique();

                    b.ToTable("Result");
                });

            modelBuilder.Entity("SWP391_CareSkin_BE.Models.Routine", b =>
                {
                    b.Property<int>("RoutineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoutineId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoutineName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoutinePeriod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SkinTypeId")
                        .HasColumnType("int");

                    b.HasKey("RoutineId");

                    b.HasIndex("SkinTypeId");

                    b.ToTable("Routine");
                });

            modelBuilder.Entity("SWP391_CareSkin_BE.Models.RoutineProduct", b =>
                {
                    b.Property<int>("RoutineProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoutineProductId"));

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("RoutineId")
                        .HasColumnType("int");

                    b.HasKey("RoutineProductId");

                    b.HasIndex("ProductId");

                    b.HasIndex("RoutineId");

                    b.ToTable("RoutineProduct");
                });

            modelBuilder.Entity("SWP391_CareSkin_BE.Models.SkinType", b =>
                {
                    b.Property<int>("SkinTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SkinTypeId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MaxScore")
                        .HasColumnType("int");

                    b.Property<int>("MinScore")
                        .HasColumnType("int");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SkinTypeId");

                    b.ToTable("SkinType");
                });

            modelBuilder.Entity("SWP391_CareSkin_BE.Models.Staff", b =>
                {
                    b.Property<int>("StaffId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StaffId"));

                    b.Property<DateOnly?>("DoB")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PictureUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StaffId");

                    b.ToTable("Staff");
                });

            modelBuilder.Entity("SWP391_CareSkin_BE.Models.Support", b =>
                {
                    b.Property<int>("SuppportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SuppportId"));

                    b.Property<string>("Context")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("StaffId")
                        .HasColumnType("int");

                    b.HasKey("SuppportId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("StaffId");

                    b.ToTable("Support");
                });

            modelBuilder.Entity("SWP391_CareSkin_BE.Models.UserQuizAttempt", b =>
                {
                    b.Property<int>("UserQuizAttemptId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserQuizAttemptId"));

                    b.Property<DateOnly>("AttemptDate")
                        .HasColumnType("date");

                    b.Property<int>("AttemptNumber")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<int>("QuizId")
                        .HasColumnType("int");

                    b.HasKey("UserQuizAttemptId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("QuizId");

                    b.ToTable("UserQuizAttempt");
                });

            modelBuilder.Entity("SWP391_CareSkin_BE.Models.VnpayTransactions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<string>("PayUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ResultCode")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("VnpayTransactions");
                });

            modelBuilder.Entity("SWP391_CareSkin_BE.Models.Answer", b =>
                {
                    b.HasOne("SWP391_CareSkin_BE.Models.Question", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("SWP391_CareSkin_BE.Models.BlogNews", b =>
                {
                    b.HasOne("SWP391_CareSkin_BE.Models.Customer", "Customer")
                        .WithMany("BlogNews")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("SWP391_CareSkin_BE.Models.Cart", b =>
                {
                    b.HasOne("SWP391_CareSkin_BE.Models.Customer", "Customer")
                        .WithMany("Carts")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SWP391_CareSkin_BE.Models.Product", "Product")
                        .WithMany("Carts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SWP391_CareSkin_BE.Models.ProductVariation", "ProductVariation")
                        .WithMany("Carts")
                        .HasForeignKey("ProductVariationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Product");

                    b.Navigation("ProductVariation");
                });

            modelBuilder.Entity("SWP391_CareSkin_BE.Models.History", b =>
                {
                    b.HasOne("SWP391_CareSkin_BE.Models.Answer", "Answer")
                        .WithMany("Historys")
                        .HasForeignKey("AnswerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SWP391_CareSkin_BE.Models.UserQuizAttempt", "UserQuizAttempt")
                        .WithMany("Histories")
                        .HasForeignKey("AttemmptId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SWP391_CareSkin_BE.Models.Question", "Question")
                        .WithMany("Historys")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Answer");

                    b.Navigation("Question");

                    b.Navigation("UserQuizAttempt");
                });

            modelBuilder.Entity("SWP391_CareSkin_BE.Models.Order", b =>
                {
                    b.HasOne("SWP391_CareSkin_BE.Models.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SWP391_CareSkin_BE.Models.OrderStatus", "OrderStatus")
                        .WithMany("Orders")
                        .HasForeignKey("OrderStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SWP391_CareSkin_BE.Models.Promotion", "Promotion")
                        .WithMany("Orders")
                        .HasForeignKey("PromotionId");

                    b.Navigation("Customer");

                    b.Navigation("OrderStatus");

                    b.Navigation("Promotion");
                });

            modelBuilder.Entity("SWP391_CareSkin_BE.Models.OrderProduct", b =>
                {
                    b.HasOne("SWP391_CareSkin_BE.Models.Order", "Order")
                        .WithMany("OrderProducts")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SWP391_CareSkin_BE.Models.Product", "Product")
                        .WithMany("OrderProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SWP391_CareSkin_BE.Models.ProductVariation", "ProductVariation")
                        .WithMany("OrderProducts")
                        .HasForeignKey("ProductVariationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");

                    b.Navigation("ProductVariation");
                });

            modelBuilder.Entity("SWP391_CareSkin_BE.Models.Product", b =>
                {
                    b.HasOne("SWP391_CareSkin_BE.Models.Brand", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");
                });

            modelBuilder.Entity("SWP391_CareSkin_BE.Models.ProductDetailIngredient", b =>
                {
                    b.HasOne("SWP391_CareSkin_BE.Models.Product", "Product")
                        .WithMany("ProductDetailIngredients")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("SWP391_CareSkin_BE.Models.ProductForSkinType", b =>
                {
                    b.HasOne("SWP391_CareSkin_BE.Models.Product", "Product")
                        .WithMany("ProductForSkinTypes")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SWP391_CareSkin_BE.Models.SkinType", "SkinType")
                        .WithMany("ProductForSkinTypes")
                        .HasForeignKey("SkinTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("SkinType");
                });

            modelBuilder.Entity("SWP391_CareSkin_BE.Models.ProductMainIngredient", b =>
                {
                    b.HasOne("SWP391_CareSkin_BE.Models.Product", "Product")
                        .WithMany("ProductMainIngredients")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("SWP391_CareSkin_BE.Models.ProductPicture", b =>
                {
                    b.HasOne("SWP391_CareSkin_BE.Models.Product", "Product")
                        .WithMany("ProductPictures")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("SWP391_CareSkin_BE.Models.ProductUsage", b =>
                {
                    b.HasOne("SWP391_CareSkin_BE.Models.Product", "Product")
                        .WithMany("ProductUsages")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("SWP391_CareSkin_BE.Models.ProductVariation", b =>
                {
                    b.HasOne("SWP391_CareSkin_BE.Models.Product", "Product")
                        .WithMany("ProductVariations")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("SWP391_CareSkin_BE.Models.PromotionCustomer", b =>
                {
                    b.HasOne("SWP391_CareSkin_BE.Models.Customer", "Customer")
                        .WithMany("PromotionCustomers")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SWP391_CareSkin_BE.Models.Promotion", "Promotion")
                        .WithMany("PromotionCustomers")
                        .HasForeignKey("PromotionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Promotion");
                });

            modelBuilder.Entity("SWP391_CareSkin_BE.Models.PromotionProduct", b =>
                {
                    b.HasOne("SWP391_CareSkin_BE.Models.Product", "Product")
                        .WithMany("PromotionProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SWP391_CareSkin_BE.Models.Promotion", "Promotion")
                        .WithMany("PromotionProducts")
                        .HasForeignKey("PromotionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Promotion");
                });

            modelBuilder.Entity("SWP391_CareSkin_BE.Models.Question", b =>
                {
                    b.HasOne("SWP391_CareSkin_BE.Models.Quiz", "Quiz")
                        .WithMany("Questions")
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Quiz");
                });

            modelBuilder.Entity("SWP391_CareSkin_BE.Models.RatingFeedback", b =>
                {
                    b.HasOne("SWP391_CareSkin_BE.Models.Customer", "Customer")
                        .WithMany("RatingFeedbacks")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SWP391_CareSkin_BE.Models.Product", "Product")
                        .WithMany("RatingFeedbacks")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("SWP391_CareSkin_BE.Models.RatingFeedbackImage", b =>
                {
                    b.HasOne("SWP391_CareSkin_BE.Models.RatingFeedback", "RatingFeedback")
                        .WithMany("RatingFeedbackImages")
                        .HasForeignKey("RatingFeedbackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RatingFeedback");
                });

            modelBuilder.Entity("SWP391_CareSkin_BE.Models.Result", b =>
                {
                    b.HasOne("SWP391_CareSkin_BE.Models.Customer", "Customer")
                        .WithMany("Results")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SWP391_CareSkin_BE.Models.SkinType", "SkinType")
                        .WithMany("Results")
                        .HasForeignKey("SkinTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SWP391_CareSkin_BE.Models.UserQuizAttempt", "UserQuizAttempt")
                        .WithOne()
                        .HasForeignKey("SWP391_CareSkin_BE.Models.Result", "UserQuizAttemptId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("SkinType");

                    b.Navigation("UserQuizAttempt");
                });

            modelBuilder.Entity("SWP391_CareSkin_BE.Models.Routine", b =>
                {
                    b.HasOne("SWP391_CareSkin_BE.Models.SkinType", "SkinType")
                        .WithMany("Routines")
                        .HasForeignKey("SkinTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SkinType");
                });

            modelBuilder.Entity("SWP391_CareSkin_BE.Models.RoutineProduct", b =>
                {
                    b.HasOne("SWP391_CareSkin_BE.Models.Product", "Product")
                        .WithMany("RoutineProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SWP391_CareSkin_BE.Models.Routine", "Routine")
                        .WithMany("RoutineProducts")
                        .HasForeignKey("RoutineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Routine");
                });

            modelBuilder.Entity("SWP391_CareSkin_BE.Models.Support", b =>
                {
                    b.HasOne("SWP391_CareSkin_BE.Models.Customer", "Customer")
                        .WithMany("Supports")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SWP391_CareSkin_BE.Models.Staff", "Staff")
                        .WithMany("Supports")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("SWP391_CareSkin_BE.Models.UserQuizAttempt", b =>
                {
                    b.HasOne("SWP391_CareSkin_BE.Models.Customer", "Customer")
                        .WithMany("UserQuizAttempts")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SWP391_CareSkin_BE.Models.Quiz", "Quiz")
                        .WithMany("UserQuizAttempts")
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Quiz");
                });

            modelBuilder.Entity("SWP391_CareSkin_BE.Models.VnpayTransactions", b =>
                {
                    b.HasOne("SWP391_CareSkin_BE.Models.Order", "order")
                        .WithMany("VnpayTransactions")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("order");
                });

            modelBuilder.Entity("SWP391_CareSkin_BE.Models.Answer", b =>
                {
                    b.Navigation("Historys");
                });

            modelBuilder.Entity("SWP391_CareSkin_BE.Models.Brand", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("SWP391_CareSkin_BE.Models.Customer", b =>
                {
                    b.Navigation("BlogNews");

                    b.Navigation("Carts");

                    b.Navigation("Orders");

                    b.Navigation("PromotionCustomers");

                    b.Navigation("RatingFeedbacks");

                    b.Navigation("Results");

                    b.Navigation("Supports");

                    b.Navigation("UserQuizAttempts");
                });

            modelBuilder.Entity("SWP391_CareSkin_BE.Models.Order", b =>
                {
                    b.Navigation("OrderProducts");

                    b.Navigation("VnpayTransactions");
                });

            modelBuilder.Entity("SWP391_CareSkin_BE.Models.OrderStatus", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("SWP391_CareSkin_BE.Models.Product", b =>
                {
                    b.Navigation("Carts");

                    b.Navigation("OrderProducts");

                    b.Navigation("ProductDetailIngredients");

                    b.Navigation("ProductForSkinTypes");

                    b.Navigation("ProductMainIngredients");

                    b.Navigation("ProductPictures");

                    b.Navigation("ProductUsages");

                    b.Navigation("ProductVariations");

                    b.Navigation("PromotionProducts");

                    b.Navigation("RatingFeedbacks");

                    b.Navigation("RoutineProducts");
                });

            modelBuilder.Entity("SWP391_CareSkin_BE.Models.ProductVariation", b =>
                {
                    b.Navigation("Carts");

                    b.Navigation("OrderProducts");
                });

            modelBuilder.Entity("SWP391_CareSkin_BE.Models.Promotion", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("PromotionCustomers");

                    b.Navigation("PromotionProducts");
                });

            modelBuilder.Entity("SWP391_CareSkin_BE.Models.Question", b =>
                {
                    b.Navigation("Answers");

                    b.Navigation("Historys");
                });

            modelBuilder.Entity("SWP391_CareSkin_BE.Models.Quiz", b =>
                {
                    b.Navigation("Questions");

                    b.Navigation("UserQuizAttempts");
                });

            modelBuilder.Entity("SWP391_CareSkin_BE.Models.RatingFeedback", b =>
                {
                    b.Navigation("RatingFeedbackImages");
                });

            modelBuilder.Entity("SWP391_CareSkin_BE.Models.Routine", b =>
                {
                    b.Navigation("RoutineProducts");
                });

            modelBuilder.Entity("SWP391_CareSkin_BE.Models.SkinType", b =>
                {
                    b.Navigation("ProductForSkinTypes");

                    b.Navigation("Results");

                    b.Navigation("Routines");
                });

            modelBuilder.Entity("SWP391_CareSkin_BE.Models.Staff", b =>
                {
                    b.Navigation("Supports");
                });

            modelBuilder.Entity("SWP391_CareSkin_BE.Models.UserQuizAttempt", b =>
                {
                    b.Navigation("Histories");
                });
#pragma warning restore 612, 618
        }
    }
}
